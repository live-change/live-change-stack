import { renderToString } from 'vue/server-renderer'
import { renderMetaToString } from 'vue-meta/ssr'

import { serverApi } from '@live-change/vue3-ssr/serverApi.js'

import { createApp } from "./main.js"
import { setTime } from "./time.js"

import { renderHeadToString } from "@vueuse/head"

function escapeHtml(unsafe) {
  return (''+unsafe)
      .replace(/&/g, "&amp;")
      .replace(/</g, "&lt;")
      .replace(/>/g, "&gt;")
      .replace(/"/g, "&quot;")
      .replace(/'/g, "&#039;");
}

export function serverEntry(App, createRouter, config = {}) {
  return async function({ url, headers, dao, windowId, now }) {
    setTime(now)

    const host = headers['host']
    console.error('URL', host, url)
    const api = await serverApi(dao, {
      use: [],
      windowId
    })

    const response = {
      status: 200,
      headers: {
        'Content-Type': 'text/html'
      }
    }

    const { app, router, head } = await createApp(
      config, api, App, createRouter, host, headers, response, url
    )

    app.directive('shared-element', {})

    // set the router to the desired URL before rendering
    router.push(url)
    await router.isReady()

    // prefetch data
    await api.preFetchRoute(router.currentRoute, router)

    // passing SSR context object which will be available via useSSRContext()
    // @vitejs/plugin-vue injects code into a component's setup() that registers
    // itself on ctx.modules. After the render, ctx.modules would contain all the
    // components that have been instantiated during this render call.
    const ctx = {}
    const html = await renderToString(app, ctx)

    const data = api.prerenderCache.cacheData()

    // the SSR manifest generated by Vite contains module -> chunk/asset mapping
    // which we can then use to determine what files need to be preloaded for this
    // request.

    const renderedHead = await renderHeadToString(head)
    console.log("HEAD", renderedHead)

    const hed=  {
      headTags: '<title>IPI Swap</title>\n' +
      '<link rel="icon" href="/icon/icon256.png" type="image/png" sizes="256x256">\n' +
      '<link rel="icon" href="/icon/icon128.png" type="image/png" sizes="128x128">\n' +
      '<link rel="icon" href="/icon/icon64.png" type="image/png" sizes="64x64">\n' +
      '<link rel="icon" href="/icon/icon32.png" type="image/png" sizes="32x32">\n' +
      '<link rel="icon" href="/icon/icon16.png" type="image/png" sizes="16x16">',
        bodyTags: '',
        bodyTagsOpen: '',
        htmlAttrs: ' lang="en" amp=""',
        bodyAttrs: ''
    }


    return {html, data, meta: renderedHead, modules: ctx.modules, response}
  }
}
